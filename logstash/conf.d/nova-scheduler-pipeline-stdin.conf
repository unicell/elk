input {
  stdin {
    tags => ["stdin"]
  }
}
filter {
  if "stdin" not in [tags] {
    drop {}
  }

  grok {
    match => { "message" => "%{OSPREFIX} %{NOTSPACE:module} \[%{CONTEXT}\] %{GREEDYDATA:log_message}" }
    #break_on_match => false
  }

  # drop unneeded events
  if [module] == "sqlalchemy.engine.base.Engine" or
     [module] == "nova.openstack.common.lockutils" or
     [message] =~ "FROM|WHERE|LIMIT" {
       drop {}
  }

  date { match => ["log_timestamp", "ISO8601"] }

  if [module] != "nova.filters" and
     [module] != "nova.scheduler.filter_scheduler" {
       drop {}
  }

  # parsing individual filter results
  if [module] == "nova.filters" {
    grok {
      match => { "log_message" => "%{SCHEDULER_FILTER_INDICATOR} %{GREEDYDATA}" }
    }
    if "_grokparsefailure" in [tags] {
       drop {}
    }
    if [log_message] =~ "Starting with" {
      mutate {
        add_field => { "filter_name" => "START" }
        add_tag => [ "scheduling-start" ]
      }
    }
    mutate { convert => { "filtered_num_of_hosts" => "integer" } }
  }

  if [module] == "nova.scheduler.filter_scheduler" {
    # consolidating filter result
    if [log_message] =~ "Filtered " {
      grok {
        match => { "log_message" => "%{FILTER_RESULT_LIST} %{GREEDYDATA:remainder}" }
      }
      mutate { add_field => { "scheduler_state" => "FILTERED" } }
      nova_scheduler_states { states_field_name => "filter_result_entries" }
    } else if [log_message] =~ "Weighed " {
      grok {
        match => { "log_message" => "%{WEIGHER_RESULT_LIST} %{GREEDYDATA:remainder}" }
      }
      # WeighedHost [host: (host1, host1.domain) ram:1234 disk:4321, weight: 1.0], ...
      # -> (host1, host1.domain) ram:1234 disk:4321, weight: 1.0, ...
      ruby {
        code => "entries = event['weigher_result_entries']
                 entries = entries.gsub(/WeighedHost \[host: |\]/, '')
                 entries = entries.gsub(/, weight: /, ' weight:')
                 event['weigher_result_entries'] = entries"
      }
      mutate {
        add_field => { "scheduler_state" => "WEIGHED" }
        add_tag => [ "scheduling-end" ]
      }
      nova_scheduler_states { states_field_name => "weigher_result_entries" }
    }

    # drop unnecessary fields from newly forked state event
    if [type] == "state_entry" {
      mutate {
        remove_field => [ "filter_result_entries", "weigher_result_entries",
                          "remainder",
                          "log_level", "log_message", "message"]
        remove_tag => [ "scheduling-start", "scheduling-end" ]
      }
      kv {
        source => "state_value"
        value_split => ":"
      }
      mutate { convert => { "ram" => "integer" } }
      mutate { convert => { "disk" => "integer" } }
      mutate { convert => { "io_ops" => "integer" } }
      mutate { convert => { "instances" => "integer" } }
      mutate { convert => { "weight" => "float" } }
    }
  }

  elapsed {
    start_tag => "scheduling-start"
    end_tag => "scheduling-end"
    unique_id_field => "req_id"
    timeout => 1800
  }

  if "_grokparsefailure" in [tags] {
    mutate {
      add_tag => [ "unknown" ]
      remove_tag => [ "_grokparsefailure" ]
    }
  }
}
output {
  elasticsearch {
    hosts => ["elasticsearch"]
    index => "nova-scheduler-%{+YYYY.MM.dd}"
  }
  stdout { codec => rubydebug }
}
